server:
  port: 8123
  servlet:
    context-path: /api
spring:
  application:
    name: ytg-picture-backend
  profiles:
    active: local
      # 开放更大的文件上传体积
  servlet:
    multipart:
      max-file-size: 10MB
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    timeout: 5000
#  shardingsphere:
#    datasource:
#      names: ytg_picture
#      ytg_picture:
#        type: com.zaxxer.hikari.HikariDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/ytg_picture
#        username: root
#        password: 232170
#    rules:
#      sharding:
#          tables:
#              picture:
#                actual-data-nodes: ytg_picture.picture # 动态分表
#                table-strategy:
#                  standard:
#                    sharding-column: spaceId
#                    sharding-algorithm-name: picture_sharding_algorithm  # 使用自定义分片算法
#
#          sharding-algorithms:
#              picture_sharding_algorithm:
#                type: CLASS_BASED
#                props:
#                  strategy: standard
#                  algorithmClassName: com.binqi.ytgpicturebackend.manager.sharding.PictureShardingAlgorithm
#    props:
#      sql-show: true

  # 数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ytg_picture
    username: root
    password: 232170
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: false
    # 仅在开发环境开启日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
#      enable-sql-runner: true
      logic-delete-field: isDelete # 全局逻辑删除的实体字段名
      logic-delete-value: 1 # 逻辑已删除值（默认为 1）
      logic-not-delete-value: 0 # 逻辑未删除值（默认为 0）
# 接口文档配置
knife4j:
  enable: true
  openapi:
    title: "接口文档"
    version: 1.0
    group:
      default:
        api-rule: package
        api-rule-resources:
          - com.binqi.ytgpicturebackend.controller
# 对象存储配置（需要从腾讯云获取）
cos:
  client:
    host:
    secretId:
    secretKey:
    region:
    bucket:
# 阿里云 AI 配置
aliYunAi:
  apiKey:





